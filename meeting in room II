class Solution {
  public:
    int minMeetingRooms(vector<int> &start, vector<int> &end) {
        // code here
        sort(start.begin(), start.end());
        sort(end.begin(), end.end());

        int n = start.size();
        int rooms = 0;
        int end_ptr = 0;

        // Traverse the start array to check when we need a new room
        for (int i = 0; i < n; i++) {
            // If the meeting starts after or when the earliest room frees up, reuse the room
            if (start[i] >= end[end_ptr]) {
                end_ptr++;  // Move to the next room that becomes free
            } else {
                rooms++;  // A new room is needed
            }
        }

        return rooms;
    }
};
